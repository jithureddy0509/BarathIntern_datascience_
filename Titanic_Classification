{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "8c117c57",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "cb482044",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_csv(r'F:\\DatasetZIP\\titanicDataset.csv')\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "3ea24541",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 12 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Name         891 non-null    object \n",
      " 4   Sex          891 non-null    object \n",
      " 5   Age          714 non-null    float64\n",
      " 6   SibSp        891 non-null    int64  \n",
      " 7   Parch        891 non-null    int64  \n",
      " 8   Ticket       891 non-null    object \n",
      " 9   Fare         891 non-null    float64\n",
      " 10  Cabin        204 non-null    object \n",
      " 11  Embarked     889 non-null    object \n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 83.7+ KB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f655e44",
   "metadata": {},
   "source": [
    "## Handling Missing values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "b4488667",
   "metadata": {},
   "outputs": [],
   "source": [
    "data['Age'].fillna(data['Age'].median(), inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "0cf42384",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 12 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Name         891 non-null    object \n",
      " 4   Sex          891 non-null    object \n",
      " 5   Age          891 non-null    float64\n",
      " 6   SibSp        891 non-null    int64  \n",
      " 7   Parch        891 non-null    int64  \n",
      " 8   Ticket       891 non-null    object \n",
      " 9   Fare         891 non-null    float64\n",
      " 10  Cabin        204 non-null    object \n",
      " 11  Embarked     889 non-null    object \n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 83.7+ KB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "7c2ba772",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 12 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Name         891 non-null    object \n",
      " 4   Sex          891 non-null    object \n",
      " 5   Age          891 non-null    float64\n",
      " 6   SibSp        891 non-null    int64  \n",
      " 7   Parch        891 non-null    int64  \n",
      " 8   Ticket       891 non-null    object \n",
      " 9   Fare         891 non-null    float64\n",
      " 10  Cabin        891 non-null    object \n",
      " 11  Embarked     889 non-null    object \n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 83.7+ KB\n"
     ]
    }
   ],
   "source": [
    "data[\"Cabin\"].fillna(\"No Cabin data\", inplace = True)\n",
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "ab50909d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['S', 'C', 'Q', nan], dtype=object)"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[\"Embarked\"].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "abfc3f63",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 12 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Name         891 non-null    object \n",
      " 4   Sex          891 non-null    object \n",
      " 5   Age          891 non-null    float64\n",
      " 6   SibSp        891 non-null    int64  \n",
      " 7   Parch        891 non-null    int64  \n",
      " 8   Ticket       891 non-null    object \n",
      " 9   Fare         891 non-null    float64\n",
      " 10  Cabin        891 non-null    object \n",
      " 11  Embarked     891 non-null    object \n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 83.7+ KB\n"
     ]
    }
   ],
   "source": [
    "data[\"Embarked\"].fillna(\"S\", inplace = True)\n",
    "data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aebc2fb5",
   "metadata": {},
   "source": [
    "Now all null values have been filled up and we have all clean columns."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16dcc3bd",
   "metadata": {},
   "source": [
    "## Removing uneccessary column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "76af326b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>No Cabin data</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>No Cabin data</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>No Cabin data</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survived  Pclass     Sex   Age  SibSp  Parch     Fare          Cabin  \\\n",
       "0         0       3    male  22.0      1      0   7.2500  No Cabin data   \n",
       "1         1       1  female  38.0      1      0  71.2833            C85   \n",
       "2         1       3  female  26.0      0      0   7.9250  No Cabin data   \n",
       "3         1       1  female  35.0      1      0  53.1000           C123   \n",
       "4         0       3    male  35.0      0      0   8.0500  No Cabin data   \n",
       "\n",
       "  Embarked  \n",
       "0        S  \n",
       "1        C  \n",
       "2        S  \n",
       "3        S  \n",
       "4        S  "
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.drop(['PassengerId', 'Name', 'Ticket'], axis=1, inplace = True)\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "ea47ad6a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 9 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   Survived  891 non-null    int64  \n",
      " 1   Pclass    891 non-null    int64  \n",
      " 2   Sex       891 non-null    object \n",
      " 3   Age       891 non-null    float64\n",
      " 4   SibSp     891 non-null    int64  \n",
      " 5   Parch     891 non-null    int64  \n",
      " 6   Fare      891 non-null    float64\n",
      " 7   Cabin     891 non-null    object \n",
      " 8   Embarked  891 non-null    object \n",
      "dtypes: float64(2), int64(4), object(3)\n",
      "memory usage: 62.8+ KB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "88283bdc",
   "metadata": {},
   "outputs": [],
   "source": [
    "data.to_csv('Titanic.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fdc3ac3b",
   "metadata": {},
   "source": [
    "### Label Encoding\n",
    "Now we will give label encode the object columns and will give a number to the categories"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "d8f2ba16",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>146</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>81</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>146</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>55</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>146</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survived  Pclass  Sex   Age  SibSp  Parch     Fare  Cabin  Embarked\n",
       "0         0       3    1  22.0      1      0   7.2500    146         2\n",
       "1         1       1    0  38.0      1      0  71.2833     81         0\n",
       "2         1       3    0  26.0      0      0   7.9250    146         2\n",
       "3         1       1    0  35.0      1      0  53.1000     55         2\n",
       "4         0       3    1  35.0      0      0   8.0500    146         2"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn import preprocessing\n",
    "label_encoder = preprocessing.LabelEncoder()\n",
    "data[\"Sex\"] = label_encoder.fit_transform(data[\"Sex\"])\n",
    "data[\"Embarked\"] = label_encoder.fit_transform(data[\"Embarked\"])\n",
    "data[\"Cabin\"] = label_encoder.fit_transform(data[\"Cabin\"])\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "dc3a1be0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 9 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   Survived  891 non-null    int64  \n",
      " 1   Pclass    891 non-null    int64  \n",
      " 2   Sex       891 non-null    int32  \n",
      " 3   Age       891 non-null    float64\n",
      " 4   SibSp     891 non-null    int64  \n",
      " 5   Parch     891 non-null    int64  \n",
      " 6   Fare      891 non-null    float64\n",
      " 7   Cabin     891 non-null    int32  \n",
      " 8   Embarked  891 non-null    int32  \n",
      "dtypes: float64(2), int32(3), int64(4)\n",
      "memory usage: 52.3 KB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "97b5491e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Survived', 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Cabin',\n",
       "       'Embarked'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6bc94d96",
   "metadata": {},
   "source": [
    "### Train-Test Split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "575d0c93",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = np.asarray(data[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Cabin','Embarked']])\n",
    "y = np.asarray(data['Survived'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "1c1f0f42",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[  3.    ,   1.    ,  22.    ,   1.    ,   0.    ,   7.25  ,\n",
       "        146.    ,   2.    ],\n",
       "       [  1.    ,   0.    ,  38.    ,   1.    ,   0.    ,  71.2833,\n",
       "         81.    ,   0.    ],\n",
       "       [  3.    ,   0.    ,  26.    ,   0.    ,   0.    ,   7.925 ,\n",
       "        146.    ,   2.    ],\n",
       "       [  1.    ,   0.    ,  35.    ,   1.    ,   0.    ,  53.1   ,\n",
       "         55.    ,   2.    ],\n",
       "       [  3.    ,   1.    ,  35.    ,   0.    ,   0.    ,   8.05  ,\n",
       "        146.    ,   2.    ]])"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x[0:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "b23d24c1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 1, 1, 0], dtype=int64)"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y[0:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "7e934676",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train set :  (757, 8) (757,)\n",
      "Test set :  (134, 8) (134,)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.15,random_state = 50)\n",
    "print(\"Train set : \" , x_train.shape, y_train.shape)\n",
    "print(\"Test set : \" , x_test.shape, y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "564ed89d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(kernel='linear')"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn import svm\n",
    "clf = svm.SVC(kernel = \"linear\")\n",
    "clf.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "e2d2b6d1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 0, 0, 0, 0], dtype=int64)"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred = clf.predict(x_test)\n",
    "y_pred[0:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "819c4343",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.8032907957336447\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import f1_score\n",
    "accuracy = f1_score(y_test, y_pred, average = \"weighted\")\n",
    "print(\"Accuracy:\", accuracy)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2afb599a",
   "metadata": {},
   "source": [
    "#### We got 80% accurate model."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "602a0615",
   "metadata": {},
   "source": [
    "## Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "85d74e26",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1], dtype=int64)"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.predict([[2,0,40,2,1,9.15,150,1]])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f7646e5",
   "metadata": {},
   "source": [
    "Here we have future predicted that the person who is having class 2, sex of female, age of 40, sbisp as 2, parchment as 1, fare as 9.15, cabin as 150 no and embarked as 2 is most likely have survived after the disaster. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a1fe9da",
   "metadata": {},
   "source": [
    "### Data Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "af448902",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>No Cabin data</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>No Cabin data</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>No Cabin data</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0  Survived  Pclass     Sex   Age  SibSp  Parch     Fare  \\\n",
       "0           0         0       3    male  22.0      1      0   7.2500   \n",
       "1           1         1       1  female  38.0      1      0  71.2833   \n",
       "2           2         1       3  female  26.0      0      0   7.9250   \n",
       "3           3         1       1  female  35.0      1      0  53.1000   \n",
       "4           4         0       3    male  35.0      0      0   8.0500   \n",
       "\n",
       "           Cabin Embarked  \n",
       "0  No Cabin data        S  \n",
       "1            C85        C  \n",
       "2  No Cabin data        S  \n",
       "3           C123        S  \n",
       "4  No Cabin data        S  "
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"Titanic.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "221cabb8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>No Cabin data</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>No Cabin data</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>No Cabin data</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survived  Pclass     Sex   Age  SibSp  Parch     Fare          Cabin  \\\n",
       "0         0       3    male  22.0      1      0   7.2500  No Cabin data   \n",
       "1         1       1  female  38.0      1      0  71.2833            C85   \n",
       "2         1       3  female  26.0      0      0   7.9250  No Cabin data   \n",
       "3         1       1  female  35.0      1      0  53.1000           C123   \n",
       "4         0       3    male  35.0      0      0   8.0500  No Cabin data   \n",
       "\n",
       "  Embarked  \n",
       "0        S  \n",
       "1        C  \n",
       "2        S  \n",
       "3        S  \n",
       "4        S  "
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.drop('Unnamed: 0', axis=1, inplace = True)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "55377145",
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "9a894248",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x2b7517eea30>"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 1080x1080 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 783.425x360 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set_theme()   #defaunt theme\n",
    "fig = plt.figure(figsize=(15,15))\n",
    "sns.relplot(data=df, x ='Fare',y='Sex',col='Survived',hue='Embarked',style='Embarked')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0215997d",
   "metadata": {},
   "source": [
    "Here categorization is done on the basis of Fare, Sex,Embarked  AND Survived column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "781c4219",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Sex', ylabel='Age'>"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(10,10))\n",
    "sns.scatterplot(x='Sex',y='Age',hue='Survived',data = df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "76c904a3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Pclass', ylabel='count'>"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x='Pclass',data=df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "6cb498cf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Survived', ylabel='count'>"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x = 'Survived',data=df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "5b9efb71",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Sex', ylabel='Survived'>"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x='Sex',y='Survived',hue='Pclass',data=df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "d2a7f8e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Sex', ylabel='Survived'>"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(y='Survived',x='Sex',hue='Embarked',data=df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "649ea54f",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Ananaya Gupta\\anaconda3\\lib\\site-packages\\seaborn\\distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Fare', ylabel='Density'>"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(df['Fare'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "4129b826",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Ananaya Gupta\\anaconda3\\lib\\site-packages\\seaborn\\distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Age', ylabel='Density'>"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(df['Age'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0c8417ad",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
